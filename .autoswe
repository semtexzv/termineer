# AutoSWE - Claude API Console Interface

## Project Overview
This is a Rust application that provides a command-line interface for interacting with Claude AI through Anthropic's API. The project is structured as a Rust package with the following components:

## Core Components
- **main.rs**: Application entry point and command-line argument handling
- **agent.rs**: Core agent implementation with tool execution and interruption handling
- **config.rs**: Configuration management and environment variable processing
- **constants.rs**: Defines important constants such as tool delimiters and formatting
- **conversation.rs**: Manages conversation history and message parsing
- **llm/**: Directory containing LLM client implementations:
  - **mod.rs**: Common interface definitions for LLM backends
  - **anthropic.rs**: Implementation for Anthropic's Claude API
  - **gemini.rs**: Implementation for Google's Gemini API
  - **factory.rs**: Factory for creating appropriate LLM clients
  - **types.rs**: Common type definitions for LLM interactions
- **prompts.rs**: System prompt templates and generation
- **session.rs**: Session management for persistent conversations
- **tools/**: Directory containing implementations for various tools:
  - **mod.rs**: Tool registry and common tool interfaces
  - **shell.rs**: Execute shell commands with streaming output and interruption
  - **read.rs**: Read file contents
  - **write.rs**: Write content to files
  - **patch.rs**: Make targeted changes to specific parts of files
  - **fetch.rs**: Retrieve content from URLs
  - **task.rs**: Execute subtasks with dedicated agent instances
  - **done.rs**: Signal task completion

## Features
- Interactive command-line interface for conversations with Claude
- Single query mode for scripting and command-line use
- Conversation history management with persistence
- Tool integration allowing the agent to:
  - Execute shell commands with real-time streaming and interruption capability
  - Read/write files
  - Make precise edits to files
  - Fetch remote content
  - Create subtasks for parallel processing
  - Signal task completion
- System prompt customization
- Support for different LLM backends (Claude, Gemini)
- Support for different model versions
- Environment variable configuration via .env files

## Configuration
- Uses Anthropic API key (required) via ANTHROPIC_API_KEY environment variable
- Default model: claude-3-7-sonnet-20250219
- Optional configurations for model selection and max tokens

## Project Dependencies
- serde, serde_json: For JSON serialization/deserialization
- ureq: For making HTTP requests to LLM APIs
- base64: For encoding/decoding
- dotenvy: For loading environment variables from .env files
- crossterm: For terminal interactions and keyboard handling

## Usage Modes
1. Interactive Mode: Start without arguments for multi-turn conversation
2. Single Query Mode: Provide a query as command-line argument for one-time response

## Tool System
The application implements a robust tool system that allows Claude to:
1. Explore and understand codebases
2. Make targeted changes to files
3. Execute system commands with streaming output
4. Provide controlled interruption of long-running processes
5. Create subtasks for complex problems
6. Summarize completed tasks