# AutoSWE - Claude API Console Interface

## Project Overview
This is a Rust application that provides a command-line interface for interacting with Claude AI through Anthropic's API. The project is structured as a Rust package with the following components:

## Core Components
- **main.rs**: Contains the core application logic, including the Claude client implementation, interactive console, and tool execution framework
- **constants.rs**: Defines important constants such as tool delimiters, templates for help/usage text, and the system prompt
- **tools/**: Directory containing implementations for various tools Claude can use:
  - shell.rs: Execute shell commands
  - read.rs: Read file contents
  - write.rs: Write content to files
  - patch.rs: Make targeted changes to specific parts of files
  - done.rs: Signal task completion
  - task.rs: Execute predefined tasks

## Features
- Interactive command-line interface for conversations with Claude
- Single query mode for scripting and command-line use
- Conversation history management
- Tool integration allowing Claude to:
  - Execute shell commands
  - Read/write files
  - Make precise edits to files
  - Signal task completion
- System prompt customization
- Support for different Claude models
- Environment variable configuration via .env files

## Configuration
- Uses Anthropic API key (required) via ANTHROPIC_API_KEY environment variable
- Default model: claude-3-7-sonnet-20250219
- Optional configurations for model selection and max tokens

## Project Dependencies
- serde, serde_json: For JSON serialization/deserialization
- ureq: For making HTTP requests to Anthropic API
- base64: For encoding/decoding
- dotenvy: For loading environment variables from .env files
- crossterm: For terminal interactions

## Usage Modes
1. Interactive Mode: Start without arguments for multi-turn conversation
2. Single Query Mode: Provide a query as command-line argument for one-time response

## Tool System
The application implements a custom tool system that allows Claude to:
1. Explore and understand codebases
2. Make targeted changes to files
3. Execute system commands
4. Summarize completed tasks