# Use cargo-chef to optimize build times
FROM lukemathwalker/cargo-chef:latest AS chef
# Install required dependencies for building
RUN apt-get update && \
    apt-get install -y pkg-config libssl-dev libdbus-1-dev && \
    rm -rf /var/lib/apt/lists/*
WORKDIR /app

# First prepare a recipe (dependency list)
FROM chef AS planner
# Copy the workspace configuration and server package
COPY Cargo.toml ./
COPY server/ ./server/
# Create a minimal src directory for the root crate
RUN mkdir -p src
RUN echo 'fn main() { println!("Placeholder"); }' > src/main.rs
# Generate recipe
WORKDIR /app
RUN cargo chef prepare --recipe-path recipe.json

# Build dependencies using the recipe
FROM chef AS builder
COPY --from=planner /app/recipe.json recipe.json
# Build dependencies - this will be cached as long as dependencies don't change
RUN cargo chef cook --release --recipe-path recipe.json

# Download HTMX for the static directory
RUN apt-get update && apt-get install -y curl
RUN mkdir -p server/static/js
RUN curl -s https://unpkg.com/htmx.org@1.9.10/dist/htmx.min.js -o server/static/js/htmx.min.js

# Copy the actual code and workspace files
COPY . .
# Build the server application within the workspace
RUN cargo build --release -p termineer-server

# Create a minimal runtime image with newer GLIBC (Debian Bookworm)
FROM debian:bookworm-slim as runtime

# Install necessary runtime dependencies including PostgreSQL client and DBus
RUN apt-get update && \
    apt-get install -y libssl-dev ca-certificates curl libpq-dev libdbus-1-3 && \
    rm -rf /var/lib/apt/lists/*

# Create a non-root user to run the application
RUN useradd -ms /bin/bash appuser

# Copy the binary from the builder stage
COPY --from=builder /app/target/release/termineer-server /usr/local/bin/termineer-server

# Ensure only PostgreSQL migrations are available
RUN mkdir -p /etc/termineer/migrations
COPY --from=builder /app/server/migrations/*.sql /etc/termineer/migrations/

# Copy frontend templates and static files
RUN mkdir -p /etc/termineer/templates
COPY --from=builder /app/server/templates /etc/termineer/templates
RUN mkdir -p /etc/termineer/static
COPY --from=builder /app/server/static /etc/termineer/static

# Set ownership to the non-root user
RUN chown -R appuser:appuser /usr/local/bin/termineer-server /etc/termineer

# Switch to the non-root user
USER appuser

# Set the working directory
WORKDIR /home/appuser

# Add a health check endpoint
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:${PORT:-3000}/health || exit 1

# Expose the application port
EXPOSE ${PORT:-3000}

# Set environment variables
ENV RUST_LOG=info
ENV TEMPLATES_DIR=/etc/termineer/templates
ENV STATIC_DIR=/etc/termineer/static

# Run the server
CMD ["termineer-server"]