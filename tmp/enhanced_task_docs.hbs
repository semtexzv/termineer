### Task
Create a subtask to perform a specific goal
{{#tool "task"}}[parameters] task_name
[detailed task instructions on multiple lines]
{{/tool}}

Parameters (optional):
- `kind=TYPE`: Specify the agent kind to use for this task (e.g., kind=researcher)
- `include=PATTERN`: Include file(s) as context (supports glob patterns)

Available agent kinds:
{{available_kinds false}}

{{#done "task" 0}}

[Subtask output]
{{/done}}

## Task Tool Usage Guide

### When to Use Tasks
- **Complex problems**: Break down problems requiring multiple specialized steps
- **Context isolation**: Keep focused work separate from the main conversation
- **Parallel processing**: Run independent research or implementation simultaneously
- **Specialized expertise**: Apply specific agent kinds to targeted sub-problems
- **Deep focus**: Allow dedicated attention to one aspect of a larger problem

### Task Decomposition Patterns
1. **Research → Design → Implement → Test**: Sequential breakdown for complete solutions
2. **Divide and conquer**: Split by component, function, or feature
3. **Specialist allocation**: Assign tasks based on required expertise
4. **Depth-first exploration**: Use tasks to explore complex topics thoroughly
5. **Breadth-first scanning**: Use multiple tasks to evaluate several approaches quickly

### Information Flow Management
- **Input context**: Use `include=` to provide relevant files as starting points
- **Output formatting**: Request structured outputs compatible with main conversation
- **Knowledge transfer**: Include specific instructions for reporting key findings
- **Decision boundaries**: Define clear handoff points between tasks

### Task Description Best Practices
- Start with a clear, specific objective statement
- List required inputs and expected outputs
- Provide success criteria for task completion
- Include constraints and requirements
- Specify reporting format for results

Examples:
{{#tool "task"}}kind=code_implementer
Implement a login form validation script
Create a JavaScript function that validates:
- Email format
- Password strength (8+ chars, mixed case, numbers)
- Matching password confirmation field

Expected output:
1. A single validation.js file with JSDoc comments
2. Clear error message handling
3. Browser compatibility considerations
{{/tool}}

{{#tool "task"}}kind=researcher include=src/config.rs
Research how configuration is managed in this codebase
Focus on how configuration options are defined, loaded and accessed
Create a comprehensive overview of the configuration system

Please organize your findings into:
1. Configuration data structures
2. Loading/initialization process
3. Access patterns throughout the codebase
4. Default values and override mechanisms
{{/tool}}

{{#tool "task"}}kind=troubleshooter include=src/error.rs include=src/logging.rs
Debug the memory leak in user session handling
The application shows increasing memory usage over time
Memory grows with each user login/logout cycle
Focus on the session cleanup in auth module

Investigation steps:
1. Analyze session creation and destruction patterns
2. Identify resource acquisition and release points
3. Look for potential reference cycles or unclosed resources
4. Suggest specific fixes with code examples
{{/tool}}

When to use:
- Break down complex coding and development tasks into smaller, more manageable subtasks
- Run specialized operations in isolation from the main conversation flow
- Process detailed research or implementation tasks that require focused attention
- Create modular solutions to complex software engineering problems
- Parallelize efforts (e.g., one task explores codebase while another implements a specific feature)
- **For coding tasks**: Use this as your primary approach for managing complexity

Best practices for effective task usage:
- Be highly specific about the subtask's objectives and expected outputs
- Provide clear success criteria so the subtask knows when it's complete
- Include relevant context from your main task to avoid redundant research
- Use for targeted research that can be performed independently
- Combine results from multiple subtasks for comprehensive solutions
{{/iftool}}