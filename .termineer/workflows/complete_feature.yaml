name: "Complete Feature Workflow"
description: "End-to-end feature implementation from understanding to deployment"

parameters:

query_template: |
  I need to implement this feature: {query}
  Please help implement this complete feature from understanding requirements to pushing to git.

steps:
  - message: "understand_requirements"
    description: "Understand and clarify feature requirements"
    content: |
      I need to implement this feature: {{parameters.feature_description}}
      
      {{#if query}}
      Additional context: {{query}}
      {{/if}}
      
      Before proceeding, I need to make sure I fully understand what needs to be built.
      
      Based on the description provided, please:
      1. Summarize your understanding of the feature requirements
      2. Identify any ambiguities or missing information
      3. Propose specific clarifying questions if needed
      4. Outline the core functionality that needs to be implemented
      5. Define the expected behavior and acceptance criteria
    store_response: "requirements_analysis"
    
  - wait: "confirm_requirements"
    wait_message: "Review the requirements analysis. Press Enter to continue with codebase investigation, or provide clarifications..."

  - shell: "explore_codebase_structure"
    description: "Explore the codebase structure"
    command: "find . -type f \\( -name '*.rs' -o -name '*.js' -o -name '*.py' -o -name '*.go' -o -name '*.java' -o -name '*.ts' -o -name '*.cpp' -o -name '*.c' \\) | grep -v 'node_modules' | grep -v 'target' | sort"
    store_output: "codebase_files"

  - shell: "identify_language"
    description: "Identify the primary programming language"
    command: "find . -type f -name '*.*' | grep -v 'node_modules' | grep -v 'target' | grep -v '.git' | sed 's/.*\\.//' | sort | uniq -c | sort -nr | head -5"
    store_output: "language_stats"

  - shell: "examine_key_files"
    description: "Examine key files to understand architecture"
    command: "find . -type f \\( -name 'main.*' -o -name 'index.*' -o -name 'app.*' -o -name 'core.*' -o -path '*/src/*' \\) | grep -v 'node_modules' | grep -v '.git' | head -5 | xargs cat"
    store_output: "key_files_content"

  - shell: "check_dependencies"
    description: "Check project dependencies"
    command: |
      if [ -f "Cargo.toml" ]; then
        cat Cargo.toml
      elif [ -f "package.json" ]; then
        cat package.json
      elif [ -f "requirements.txt" ]; then
        cat requirements.txt
      elif [ -f "go.mod" ]; then
        cat go.mod
      elif [ -f "pom.xml" ]; then
        cat pom.xml
      else
        echo "No standard dependency file found"
      fi
    store_output: "dependencies"

  - message: "analyze_codebase"
    description: "Analyze the codebase structure"
    content: |
      I'm analyzing the codebase to implement: {{parameters.feature_description}}
      
      Here's the file structure:
      ```
      {{codebase_files}}
      ```
      
      Language statistics:
      ```
      {{language_stats}}
      ```
      
      Key files content:
      ```
      {{key_files_content}}
      ```
      
      Dependencies:
      ```
      {{dependencies}}
      ```
      
      Based on this information, please:
      1. Identify the overall project architecture and patterns
      2. Determine where the new feature should be implemented
      3. Identify which existing components will need to be modified
      4. List the key files we'll need to work with
      5. Note any constraints or considerations based on the project structure
    store_response: "codebase_analysis"

  - message: "web_research"
    description: "Research relevant information on the web"
    content: |
      Before implementing the feature, I need to research best practices and potential approaches.
      
      Feature to implement: {{parameters.feature_description}}
      
      Based on the codebase analysis, please:
      1. Identify the key concepts and technologies I need to research
      2. Suggest specific search queries I should use
      3. Outline what information would be most valuable (APIs, libraries, patterns, etc.)
      4. Recommend authoritative sources for this information
    store_response: "research_plan"

  - shell: "run_searches"
    description: "Execute web searches based on research plan"
    command: "echo 'Web search simulation - in a full implementation, this would perform actual searches'"
    store_output: "search_results"

  - message: "implementation_plan"
    description: "Create a detailed implementation plan"
    content: |
      Now that I've analyzed the codebase and done research, I need to create a detailed implementation plan for: {{parameters.feature_description}}
      
      Please create a comprehensive implementation plan that includes:
      1. Files to create or modify
      2. Step-by-step implementation approach
      3. Specific components/modules to develop
      4. Integration points with existing code
      5. Testing approach
      6. Potential challenges and mitigations
    store_response: "detailed_plan"

  - shell: "create_feature_branch"
    description: "Create a git branch for the feature"
    command: "git checkout -b {{parameters.branch_name}} || echo 'Failed to create branch - continuing anyway'"
    store_output: "branch_result"

  - message: "implement_feature"
    description: "Implement the feature"
    content: |
      Based on the implementation plan, please generate the complete code for this feature.
      
      For each file that needs to be created or modified, provide:
      - The full file path
      - Complete file content or specific changes
      - A brief explanation of the implementation choices
      
      Please ensure the code:
      - Follows the project's existing coding style and patterns
      - Is properly commented
      - Handles edge cases and errors appropriately
      - Integrates well with the existing codebase
    store_response: "implementation_code"

  - wait: "confirm_implementation"
    wait_message: "Review the implementation code. Press Enter to write the files to disk, or provide feedback..."

  - shell: "implement_files"
    description: "Write implementation files to disk"
    command: "echo 'This step would create/modify files based on implementation code. For safety, this is currently a placeholder.'"
    store_output: "file_creation_result"

  - shell: "build_test"
    description: "Test if the code builds correctly"
    command: |
      if [ -f "Cargo.toml" ]; then
        cargo check
      elif [ -f "package.json" ]; then
        npm run build 2>/dev/null || npm run compile 2>/dev/null || echo "No build script found"
      elif [ -f "requirements.txt" ]; then
        echo "Python project - checking for syntax errors"
        find . -name "*.py" -exec python -m py_compile {} \; 2>&1 || echo "Syntax check failed"
      elif [ -f "go.mod" ]; then
        go build ./... 2>&1 || echo "Go build failed"
      elif [ -f "pom.xml" ]; then
        mvn compile 2>&1 || echo "Maven build failed"
      else
        echo "No standard build system detected"
      fi
    store_output: "build_result"

  - message: "create_tests"
    description: "Create tests for the feature"
    content: |
      Please create tests for the implemented feature.
      
      Build result:
      ```
      {{build_result}}
      ```
      
      For each component/module implemented, provide:
      - The test file path
      - Complete test code
      - Description of what each test verifies
      
      Include:
      - Unit tests for individual components
      - Integration tests if appropriate
      - Edge case tests
      
      Ensure tests follow the project's existing testing patterns.
    store_response: "test_code"

  - wait: "confirm_tests"
    wait_message: "Review the test code. Press Enter to write the test files to disk, or provide feedback..."

  - shell: "implement_tests"
    description: "Write test files to disk"
    command: "echo 'This step would create test files. For safety, this is currently a placeholder.'"
    store_output: "test_creation_result"

  - shell: "run_tests"
    description: "Run the tests"
    command: |
      if [ -f "Cargo.toml" ]; then
        cargo test 2>&1 || echo "Tests failed"
      elif [ -f "package.json" ]; then
        npm test 2>&1 || echo "Tests failed or no test command"
      elif [ -f "requirements.txt" ]; then
        pytest 2>/dev/null || python -m unittest discover 2>&1 || echo "No tests found/failed"
      elif [ -f "go.mod" ]; then
        go test ./... 2>&1 || echo "Go tests failed"
      elif [ -f "pom.xml" ]; then
        mvn test 2>&1 || echo "Maven tests failed"
      else
        echo "No standard test system detected"
      fi
    store_output: "test_result"

  - message: "finalize_changes"
    description: "Review and finalize changes"
    content: |
      The implementation and tests are complete. Here are the results:
      
      Build result:
      ```
      {{build_result}}
      ```
      
      Test results:
      ```
      {{test_result}}
      ```
      
      Please review the implementation and tests and recommend any final adjustments before committing.
      
      Provide:
      1. A summary of what was implemented
      2. Any issues that need to be addressed
      3. Suggestions for improvements
      4. A commit message for the changes
    store_response: "final_review"

  - shell: "commit_changes"
    description: "Commit the changes to git"
    command: |
      echo "This would commit changes to git."
      echo "git add ."
      echo "git commit -m 'Implement: {{parameters.feature_description}}'"
    store_output: "commit_result"

  - shell: "push_changes"
    description: "Push the changes to the repository"
    command: |
      echo "This would push changes to git remote."
      echo "git push origin {{parameters.branch_name}}"
    store_output: "push_result"

  - output: "completion_summary"
    description: "Show completion summary"
    content: |
      # Feature Implementation Complete! 🎉
      
      ## Feature: {{parameters.feature_description}}
      
      ### Implementation Summary
      {{final_review}}
      
      ### Status
      - Branch: {{parameters.branch_name}}
      - Build: {{#if build_result contains "failed"}}❌ Failed{{else}}✅ Successful{{/if}}
      - Tests: {{#if test_result contains "failed"}}❌ Failed{{else}}✅ Successful{{/if}}
      
      ### Next Steps
      1. Review the implemented code thoroughly
      2. Create a pull request for the branch
      3. Address any issues from code review
      4. Merge the changes to the main branch
      
      All files have been committed and pushed to the feature branch.