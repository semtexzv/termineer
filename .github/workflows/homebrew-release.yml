name: Homebrew Release

# This workflow builds binaries for macOS, creates a GitHub release,
# and updates a Homebrew tap with a formula for easy installation
#
# Triggering:
# - Any tag ending with '-brew' (e.g., v0.1.0-brew) - Creates a Homebrew release

on:
  push:
    tags:
      - 'v*-brew'  # Trigger on version tags ending with -brew

jobs:
  build-binaries:
    name: Build for ${{ matrix.target.name }}
    runs-on: ${{ matrix.target.os }}
    strategy:
      fail-fast: false
      matrix:
        target:
          - name: macos-x64
            os: macos-latest
            rust_target: x86_64-apple-darwin
            binary_name: termineer
            asset_name: termineer-x86_64-apple-darwin
            
          - name: macos-arm64
            os: macos-latest
            rust_target: aarch64-apple-darwin
            binary_name: termineer
            asset_name: termineer-aarch64-apple-darwin
            
          - name: linux-x64
            os: ubuntu-latest
            rust_target: x86_64-unknown-linux-gnu
            binary_name: termineer
            asset_name: termineer-x86_64-linux-gnu

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target.rust_target }}
      
      # Special case for macOS ARM
      - name: Build for macOS ARM64
        if: matrix.target.name == 'macos-arm64'
        run: |
          rustup target add aarch64-apple-darwin
          cargo build --release --target aarch64-apple-darwin
      
      # For all other targets
      - name: Build binary
        if: matrix.target.name != 'macos-arm64'
        run: cargo build --release --target ${{ matrix.target.rust_target }}
      
      # Prepare the binary for release
      - name: Prepare binary
        shell: bash
        run: |
          if [[ "${{ matrix.target.name }}" == "macos-arm64" ]]; then
            cp target/aarch64-apple-darwin/release/${{ matrix.target.binary_name }} ${{ matrix.target.asset_name }}
          else
            cp target/${{ matrix.target.rust_target }}/release/${{ matrix.target.binary_name }} ${{ matrix.target.asset_name }}
          fi
          
          # Create checksum file
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            certutil -hashfile ${{ matrix.target.asset_name }} SHA256 | grep -v "^SHA256" | grep -v "^CertUtil" > ${{ matrix.target.asset_name }}.sha256
          else
            shasum -a 256 ${{ matrix.target.asset_name }} | cut -d ' ' -f 1 > ${{ matrix.target.asset_name }}.sha256
          fi
      
      # Upload binary and checksum as artifacts
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target.asset_name }}
          path: |
            ${{ matrix.target.asset_name }}
            ${{ matrix.target.asset_name }}.sha256

  create-release:
    needs: build-binaries
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      # Extract version from tag
      - name: Extract version
        id: version
        run: |
          VERSION="${GITHUB_REF#refs/tags/v}"
          VERSION="${VERSION%-brew}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      # Download all binary artifacts
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      
      # Create GitHub release
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: Termineer v${{ env.VERSION }}
          draft: false
          prerelease: false
          tag_name: v${{ env.VERSION }}
          body: |
            # Termineer v${{ env.VERSION }}
            
            AI Agent Console Interface for your terminal
            
            ## Installation
            
            ### Homebrew
            ```
            brew install semtexzv/tap/termineer
            ```
            
            ### NPM
            ```
            npm install -g termineer
            ```
            
            ### Manual
            Download the appropriate binary for your platform below.
          files: |
            termineer-x86_64-apple-darwin
            termineer-x86_64-apple-darwin.sha256
            termineer-aarch64-apple-darwin
            termineer-aarch64-apple-darwin.sha256
            termineer-x86_64-linux-gnu
            termineer-x86_64-linux-gnu.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Calculate download URLs and checksums
      - name: Calculate URLs and checksums
        id: checksums
        run: |
          REPO_OWNER="semtexzv"
          REPO_NAME="termineer"
          
          # Read checksums
          MACOS_INTEL_SHA=$(cat termineer-x86_64-apple-darwin.sha256)
          MACOS_ARM_SHA=$(cat termineer-aarch64-apple-darwin.sha256)
          LINUX_SHA=$(cat termineer-x86_64-linux-gnu.sha256)
          
          # Set environment variables for the formula
          echo "MACOS_INTEL_SHA=$MACOS_INTEL_SHA" >> $GITHUB_ENV
          echo "MACOS_ARM_SHA=$MACOS_ARM_SHA" >> $GITHUB_ENV
          echo "LINUX_SHA=$LINUX_SHA" >> $GITHUB_ENV
          echo "DOWNLOAD_URL=https://github.com/$REPO_OWNER/$REPO_NAME/releases/download/v${{ env.VERSION }}" >> $GITHUB_ENV
      
      # Generate Homebrew formula
      - name: Generate Homebrew formula
        run: |
          cat > termineer.rb << EOL
          class Termineer < Formula
            desc "AI Agent Console Interface for your terminal"
            homepage "https://github.com/semtexzv/termineer"
            version "${{ env.VERSION }}"
            license "MIT"
            
            on_macos do
              on_arm do
                url "${{ env.DOWNLOAD_URL }}/termineer-aarch64-apple-darwin"
                sha256 "${{ env.MACOS_ARM_SHA }}"
              end
              
              on_intel do
                url "${{ env.DOWNLOAD_URL }}/termineer-x86_64-apple-darwin"
                sha256 "${{ env.MACOS_INTEL_SHA }}"
              end
            end
            
            on_linux do
              url "${{ env.DOWNLOAD_URL }}/termineer-x86_64-linux-gnu"
              sha256 "${{ env.LINUX_SHA }}"
            end
            
            def install
              bin.install Dir["*"].first => "termineer"
            end
            
            test do
              system "#{bin}/termineer", "--help"
            end
          end
          EOL
      
      # Upload formula as artifact
      - name: Upload formula artifact
        uses: actions/upload-artifact@v4
        with:
          name: homebrew-formula
          path: termineer.rb
  
  update-tap:
    needs: create-release
    runs-on: ubuntu-latest
    if: github.repository_owner == 'semtexzv'  # Only run on the main repo
    steps:
      - name: Download formula artifact
        uses: actions/download-artifact@v4
        with:
          name: homebrew-formula
      
      # Setup Git
      - name: Setup Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      
      # Clone the tap repository
      - name: Clone tap repository
        run: |
          # Use deploy key or personal access token for authentication
          git clone https://x-access-token:${{ secrets.TAP_REPO_TOKEN }}@github.com/semtexzv/homebrew-tap.git
      
      # Update the formula
      - name: Update formula
        run: |
          # Make sure the Formula directory exists
          mkdir -p homebrew-tap/Formula
          
          # Copy the new formula
          cp termineer.rb homebrew-tap/Formula/
          
          # Commit and push changes
          cd homebrew-tap
          git add Formula/termineer.rb
          git commit -m "Update termineer to v${{ github.ref_name }}"
          git push