name: Release

# This workflow handles releases for NPM and Homebrew
# Triggered by version tags with optional suffixes to control release targets

on:
  push:
    tags:
      - 'v*'  # All version tags
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 0.1.0)'
        required: true
        default: ''
      target:
        description: 'Release target (npm, brew, both)'
        required: true
        default: 'both'
        type: choice
        options:
          - npm
          - brew
          - both

jobs:
  prepare-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
      publish_npm: ${{ steps.set-targets.outputs.publish_npm }}
      publish_brew: ${{ steps.set-targets.outputs.publish_brew }}
    steps:
      - name: Set version from tag or input
        id: set-version
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # From tag - remove v prefix and any release targets
            VERSION="${GITHUB_REF#refs/tags/v}"
            VERSION="${VERSION%-npm}"
            VERSION="${VERSION%-brew}"
            VERSION="${VERSION%-publish}"
          else
            # From workflow dispatch
            VERSION="${{ github.event.inputs.version }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          
      - name: Determine release targets
        id: set-targets
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # Determine from tag suffix
            TAG="${GITHUB_REF#refs/tags/}"
            
            if [[ "$TAG" == *"-npm"* || "$TAG" == *"-publish"* ]]; then
              PUBLISH_NPM="true"
            else
              PUBLISH_NPM="false"
            fi
            
            if [[ "$TAG" == *"-brew"* ]]; then
              PUBLISH_BREW="true"
            else
              PUBLISH_BREW="false"
            fi
            
            # Special case: no suffix means build artifacts only
            if [[ "$TAG" == v* && "$TAG" != *"-"* ]]; then
              PUBLISH_NPM="false"
              PUBLISH_BREW="false"
            fi
          else
            # From workflow dispatch input
            TARGET="${{ github.event.inputs.target }}"
            
            if [[ "$TARGET" == "npm" || "$TARGET" == "both" ]]; then
              PUBLISH_NPM="true"
            else
              PUBLISH_NPM="false"
            fi
            
            if [[ "$TARGET" == "brew" || "$TARGET" == "both" ]]; then
              PUBLISH_BREW="true"
            else
              PUBLISH_BREW="false"
            fi
          fi
          
          echo "publish_npm=$PUBLISH_NPM" >> $GITHUB_OUTPUT
          echo "publish_brew=$PUBLISH_BREW" >> $GITHUB_OUTPUT
          echo "NPM: $PUBLISH_NPM, Brew: $PUBLISH_BREW"

  # Call the build workflow to build all binaries
  build:
    needs: prepare-version
    uses: ./.github/workflows/build.yml
    with:
      version: ${{ needs.prepare-version.outputs.version }}

  # Create GitHub release with all artifacts
  github-release:
    needs: [prepare-version, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      # Download all binary artifacts
      - name: Download artifacts
        uses: actions/download-artifact@v4
        
      # Create GitHub release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Termineer v${{ needs.prepare-version.outputs.version }}
          draft: false
          prerelease: false
          tag_name: v${{ needs.prepare-version.outputs.version }}
          body: |
            # Termineer v${{ needs.prepare-version.outputs.version }}
            
            AI Agent Console Interface for your terminal
            
            ## Installation
            
            ### NPM
            ```
            npm install -g termineer
            ```
            
            ### Manual
            Download the appropriate binary for your platform below.
          files: |
            **/termineer-*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build and publish NPM package
  npm-package:
    needs: [prepare-version, build]
    if: needs.prepare-version.outputs.publish_npm == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      # Download all binary artifacts to prebuilds directory
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: prebuilds
      
      # Create NPM package structure
      - name: Create NPM package
        run: |
          # Create required directories
          mkdir -p npm-package/{bin}
          
          # Create package.json
          cat > npm-package/package.json << EOF
          {
            "name": "termineer",
            "version": "${{ needs.prepare-version.outputs.version }}",
            "description": "AI Agent Console Interface",
            "homepage": "https://termineer.io",
            "bin": {
              "termineer": "bin/termineer.js"
            },
            "scripts": {
              "postinstall": "node bin/download.js"
            },
            "dependencies": {
              "node-fetch": "^2.6.9"
            },
            "engines": {
              "node": ">=14.0.0"
            },
            "os": ["darwin", "linux", "win32"],
            "cpu": ["x64", "arm64"]
          }
          EOF
          
          # Create download.js file (used at install time)
          cat > npm-package/bin/download.js << 'EOF'
          #!/usr/bin/env node
          
          const os = require('os');
          const fs = require('fs');
          const path = require('path');
          const fetch = require('node-fetch');
          const { execFileSync } = require('child_process');
          
          // Get version from package.json
          const packageJson = require('../package.json');
          const VERSION = packageJson.version;
          
          // Determine platform and architecture
          const platform = os.platform();
          const arch = os.arch();
          let targetFile = '';
          let downloadURL = '';
          
          // Map to correct binary name and URL based on platform/arch
          if (platform === 'darwin') {
            if (arch === 'arm64') {
              targetFile = 'termineer';
              downloadURL = `https://github.com/semtexzv/termineer/releases/download/v${VERSION}/termineer-aarch64-apple-darwin`;
            } else {
              targetFile = 'termineer';
              downloadURL = `https://github.com/semtexzv/termineer/releases/download/v${VERSION}/termineer-x86_64-apple-darwin`;
            }
          } else if (platform === 'linux') {
            targetFile = 'termineer';
            downloadURL = `https://github.com/semtexzv/termineer/releases/download/v${VERSION}/termineer-x86_64-linux-gnu`;
          } else if (platform === 'win32') {
            targetFile = 'termineer.exe';
            downloadURL = `https://github.com/semtexzv/termineer/releases/download/v${VERSION}/termineer-x86_64-windows-msvc`;
          } else {
            console.error(`Unsupported platform: ${platform}-${arch}`);
            process.exit(1);
          }
          
          // Create the bin directory if it doesn't exist
          const binPath = path.join(__dirname);
          const binFile = path.join(binPath, targetFile);
          
          async function download() {
            try {
              console.log(`Downloading Termineer v${VERSION} for ${platform}-${arch}`);
              console.log(`URL: ${downloadURL}`);
              
              const response = await fetch(downloadURL);
              if (!response.ok) {
                throw new Error(`Download failed with status ${response.status}: ${response.statusText}`);
              }
              
              const fileStream = fs.createWriteStream(binFile);
              await new Promise((resolve, reject) => {
                response.body.pipe(fileStream);
                response.body.on('error', reject);
                fileStream.on('finish', resolve);
              });
              
              // Make the file executable on non-Windows platforms
              if (platform !== 'win32') {
                fs.chmodSync(binFile, 0o755);
              }
              
              console.log('Termineer downloaded successfully!');
            } catch (error) {
              console.error(`Error downloading Termineer: ${error.message}`);
              process.exit(1);
            }
          }
          
          // Perform the download
          download();
          EOF
          
          # Create termineer.js
          cat > npm-package/bin/termineer.js << 'EOF'
          #!/usr/bin/env node
          
          const os = require('os');
          const path = require('path');
          const fs = require('fs');
          const { spawnSync } = require('child_process');
          
          // Get binary name based on platform
          const platform = os.platform();
          const binaryName = platform === 'win32' ? 'termineer.exe' : 'termineer';
          
          // Path to the binary file
          const binaryPath = path.join(__dirname, binaryName);
          
          // Check if binary exists, if not offer help
          if (!fs.existsSync(binaryPath)) {
            console.error(`Termineer binary not found at ${binaryPath}`);
            console.error('Try running: npm install -g termineer');
            process.exit(1);
          }
          
          // Execute the binary
          try {
            const result = spawnSync(binaryPath, process.argv.slice(2), {
              stdio: 'inherit',
              shell: false
            });
            
            process.exit(result.status || 0);
          } catch (error) {
            console.error(`Error running Termineer: ${error.message}`);
            process.exit(1);
          }
          EOF
          
          # Make files executable
          chmod +x npm-package/bin/termineer.js npm-package/bin/download.js
          
          # Create README.md
          cat > npm-package/README.md << 'EOF'
          # Termineer
          
          AI Agent Console Interface
          
          ## Installation
          
          ```
          npm install -g termineer
          ```
          
          ## Usage
          
          ```
          termineer
          ```
          
          For more information, run:
          
          ```
          termineer --help
          ```
          
          ## Website
          
          Visit [termineer.io](https://termineer.io) for more information.
          EOF
          
      # Package everything up
      - name: Create NPM package
        run: |
          cd npm-package
          # Install dependencies needed for packaging
          npm install --no-save node-fetch@2.6.9
          npm pack
          mv termineer-${{ needs.prepare-version.outputs.version }}.tgz ../termineer-npm-package.tgz
      
      # Upload the package as an artifact
      - name: Upload NPM package artifact
        uses: actions/upload-artifact@v4
        with:
          name: npm-package
          path: termineer-npm-package.tgz
      
      # Publish to NPM if requested
      - name: Publish to NPM
        if: needs.prepare-version.outputs.publish_npm == 'true'
        uses: JS-DevTools/npm-publish@v2
        with:
          token: ${{ secrets.NPM_TOKEN }}
          package: ./termineer-npm-package.tgz

  # Create and update Homebrew formula
  homebrew-formula:
    needs: [prepare-version, build, github-release]
    if: needs.prepare-version.outputs.publish_brew == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      # Download artifacts to get checksums
      - name: Download artifacts
        uses: actions/download-artifact@v4
      
      # Calculate SHA256 checksums
      - name: Get SHA256 checksums
        id: checksums
        run: |
          MACOS_INTEL_SHA=$(cat termineer-x86_64-apple-darwin/termineer-x86_64-apple-darwin.sha256)
          MACOS_ARM_SHA=$(cat termineer-aarch64-apple-darwin/termineer-aarch64-apple-darwin.sha256)
          LINUX_SHA=$(cat termineer-x86_64-linux-gnu/termineer-x86_64-linux-gnu.sha256)
          
          echo "MACOS_INTEL_SHA=$MACOS_INTEL_SHA" >> $GITHUB_ENV
          echo "MACOS_ARM_SHA=$MACOS_ARM_SHA" >> $GITHUB_ENV
          echo "LINUX_SHA=$LINUX_SHA" >> $GITHUB_ENV
          
          REPO_OWNER="semtexzv"
          REPO_NAME="termineer"
          echo "DOWNLOAD_URL=https://github.com/$REPO_OWNER/$REPO_NAME/releases/download/v${{ needs.prepare-version.outputs.version }}" >> $GITHUB_ENV
      
      # Generate Homebrew formula
      - name: Generate Formula
        run: |
          cat > termineer.rb << EOL
          class Termineer < Formula
            desc "AI Agent Console Interface for your terminal"
            homepage "https://termineer.io"
            version "${{ needs.prepare-version.outputs.version }}"
            license "MIT"
            
            on_macos do
              on_arm do
                url "${{ env.DOWNLOAD_URL }}/termineer-aarch64-apple-darwin"
                sha256 "${{ env.MACOS_ARM_SHA }}"
              end
              
              on_intel do
                url "${{ env.DOWNLOAD_URL }}/termineer-x86_64-apple-darwin"
                sha256 "${{ env.MACOS_INTEL_SHA }}"
              end
            end
            
            on_linux do
              url "${{ env.DOWNLOAD_URL }}/termineer-x86_64-linux-gnu"
              sha256 "${{ env.LINUX_SHA }}"
            end
            
            def install
              bin.install Dir["*"].first => "termineer"
            end
            
            test do
              system "#{bin}/termineer", "--help"
            end
          end
          EOL
      
      # Setup Git for Homebrew tap updates
      - name: Setup Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      
      # Clone the tap repository
      - name: Clone tap repository
        run: |
          git clone https://x-access-token:${{ secrets.TAP_REPO_TOKEN }}@github.com/semtexzv/homebrew-tap.git
      
      # Update the formula
      - name: Update formula
        run: |
          mkdir -p homebrew-tap/Formula
          cp termineer.rb homebrew-tap/Formula/
          cd homebrew-tap
          git add Formula/termineer.rb
          git commit -m "Update termineer to v${{ needs.prepare-version.outputs.version }}"
          git push