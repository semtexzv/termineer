name: Release

# ===================================================================
# IMPORTANT: BUNDLED BINARIES PACKAGING APPROACH
# ===================================================================
# This workflow uses a bundled-binaries approach for NPM packaging.
# 
# Instead of downloading binaries at install time (which won't work 
# with a private repository), we:
#
# 1. Bundle all platform binaries directly in the NPM package
# 2. Use a setup.js script to select the right binary at install time
# 3. Copy the appropriate binary to the bin directory based on platform
#
# File structure:
# - bin/platform/{linux-x64,darwin-x64,darwin-arm64,win32-x64}/
# - bin/setup.js (selects and installs correct binary)
# - bin/termineer.js (launcher script)
# 
# DO NOT REVERT TO URL-BASED DOWNLOADING without ensuring the URLs
# are publicly accessible.
# ===================================================================

# This workflow handles releases for NPM and Homebrew
# Triggered by version tags with optional suffixes to control release targets

on:
  push:
    tags:
      - 'v*'  # All version tags
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 0.1.0)'
        required: true
        type: string
      target:
        description: 'Release target'
        required: true
        type: choice
        default: 'npm'
        options:
          - npm

# Add explicit permissions needed for creating releases
permissions:
  contents: write

jobs:
  prepare-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
      publish_npm: ${{ steps.set-targets.outputs.publish_npm }}
    steps:
      - name: Set version from tag or input
        id: set-version
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # From tag - remove v prefix and any release targets
            VERSION="${GITHUB_REF#refs/tags/v}"
            VERSION="${VERSION%-npm}"
            VERSION="${VERSION%-publish}"
          else
            # From workflow dispatch
            VERSION="${{ github.event.inputs.version }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          
      - name: Determine release targets
        id: set-targets
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # Determine from tag suffix
            TAG="${GITHUB_REF#refs/tags/}"
            
            if [[ "$TAG" == *"-npm"* || "$TAG" == *"-publish"* ]]; then
              PUBLISH_NPM="true"
            else
              PUBLISH_NPM="false"
            fi
            
            # Special case: no suffix means build artifacts only
            if [[ "$TAG" == v* && "$TAG" != *"-"* ]]; then
              PUBLISH_NPM="false"
            fi
          else
            # From workflow dispatch input
            TARGET="${{ github.event.inputs.target }}"
            
            if [[ "$TARGET" == "npm" ]]; then
              PUBLISH_NPM="true"
            else
              PUBLISH_NPM="false"
            fi
          fi
          
          echo "publish_npm=$PUBLISH_NPM" >> $GITHUB_OUTPUT
          echo "NPM: $PUBLISH_NPM"

  # Call the build workflow to build all binaries
  build:
    needs: prepare-version
    uses: ./.github/workflows/build.yml
    with:
      version: ${{ needs.prepare-version.outputs.version }}

  # Create GitHub release with all artifacts
  github-release:
    needs: [prepare-version, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      # Download all binary artifacts
      - name: Download artifacts
        uses: actions/download-artifact@v4
        
      # Create GitHub release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Termineer v${{ needs.prepare-version.outputs.version }}
          draft: false
          prerelease: false
          tag_name: v${{ needs.prepare-version.outputs.version }}
          body: |
            # Termineer v${{ needs.prepare-version.outputs.version }}
            
            AI Agent Console Interface for your terminal
            
            ## Installation
            
            ```
            npm install -g termineer
            ```
            
            The package includes binaries for Linux, macOS (Intel & Apple Silicon), and Windows.
          files: |
            **/termineer-*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build and publish NPM package
  npm-package:
    needs: [prepare-version, build, github-release]
    if: needs.prepare-version.outputs.publish_npm == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      # Download all binary artifacts to prebuilds directory
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: prebuilds
      
      # Create NPM package structure
      - name: Create NPM package
        run: |
          # Create required directories for platform-specific binaries
          mkdir -p npm-package/bin/platform/{linux-x64,darwin-x64,darwin-arm64,win32-x64}
          echo "Directory structure created"
          ls -la npm-package
          
          # Copy the binaries to respective platform directories
          cp prebuilds/termineer-x86_64-linux-gnu/termineer-x86_64-linux-gnu npm-package/bin/platform/linux-x64/termineer
          cp prebuilds/termineer-x86_64-apple-darwin/termineer-x86_64-apple-darwin npm-package/bin/platform/darwin-x64/termineer
          cp prebuilds/termineer-aarch64-apple-darwin/termineer-aarch64-apple-darwin npm-package/bin/platform/darwin-arm64/termineer
          cp prebuilds/termineer-x86_64-windows-msvc/termineer-x86_64-windows-msvc npm-package/bin/platform/win32-x64/termineer.exe
          
          # Set executable permissions
          chmod +x npm-package/bin/platform/linux-x64/termineer
          chmod +x npm-package/bin/platform/darwin-x64/termineer
          chmod +x npm-package/bin/platform/darwin-arm64/termineer
          
          # Create package.json
          cat > npm-package/package.json << EOF
          {
            "name": "termineer",
            "version": "${{ needs.prepare-version.outputs.version }}",
            "description": "AI Agent Console Interface",
            "homepage": "https://termineer.io",
            "bin": {
              "termineer": "bin/termineer.js"
            },
            "scripts": {
              "postinstall": "node bin/setup.js"
            },
            "engines": {
              "node": ">=14.0.0"
            },
            "os": ["darwin", "linux", "win32"],
            "cpu": ["x64", "arm64"]
          }
          EOF
          
          # Create setup.js file (used at install time to select the right binary)
          cat > npm-package/bin/setup.js << 'EOF'
          #!/usr/bin/env node
          
          const os = require('os');
          const fs = require('fs');
          const path = require('path');
          
          // Determine platform and architecture
          const platform = os.platform();
          const arch = os.arch();
          let sourceBinaryPath = '';
          let targetFile = '';
          
          console.log(`Setting up Termineer for ${platform}-${arch}`);
          
          // Map platform to correct binary path
          if (platform === 'darwin') {
            if (arch === 'arm64') {
              sourceBinaryPath = path.join(__dirname, 'platform', 'darwin-arm64', 'termineer');
              targetFile = 'termineer';
            } else {
              sourceBinaryPath = path.join(__dirname, 'platform', 'darwin-x64', 'termineer');
              targetFile = 'termineer';
            }
          } else if (platform === 'linux') {
            sourceBinaryPath = path.join(__dirname, 'platform', 'linux-x64', 'termineer');
            targetFile = 'termineer';
          } else if (platform === 'win32') {
            sourceBinaryPath = path.join(__dirname, 'platform', 'win32-x64', 'termineer.exe');
            targetFile = 'termineer.exe';
          } else {
            console.error(`Unsupported platform: ${platform}-${arch}`);
            process.exit(1);
          }
          
          // Get target path
          const targetPath = path.join(__dirname, targetFile);
          
          try {
            // Check if source binary exists
            if (!fs.existsSync(sourceBinaryPath)) {
              throw new Error(`Binary not found at ${sourceBinaryPath}`);
            }
            
            // Copy the binary to the target location
            fs.copyFileSync(sourceBinaryPath, targetPath);
            
            // Make the file executable on non-Windows platforms
            if (platform !== 'win32') {
              fs.chmodSync(targetPath, 0o755);
            }
            
            console.log(`Termineer setup complete. Binary installed at: ${targetPath}`);
          } catch (error) {
            console.error(`Error setting up Termineer: ${error.message}`);
            process.exit(1);
          }
          EOF
          
          # Create termineer.js
          cat > npm-package/bin/termineer.js << 'EOF'
          #!/usr/bin/env node
          
          const os = require('os');
          const path = require('path');
          const fs = require('fs');
          const { spawnSync } = require('child_process');
          
          // Get binary name based on platform
          const platform = os.platform();
          const binaryName = platform === 'win32' ? 'termineer.exe' : 'termineer';
          
          // Path to the binary file
          const binaryPath = path.join(__dirname, binaryName);
          
          // Check if binary exists, if not try running setup
          if (!fs.existsSync(binaryPath)) {
            console.log('Binary not found, running setup...');
            try {
              // Run the setup script
              require('./setup');
              
              // Check again
              if (!fs.existsSync(binaryPath)) {
                console.error(`Termineer binary still not found at ${binaryPath}`);
                console.error('Try reinstalling: npm install -g termineer');
                process.exit(1);
              }
            } catch (setupError) {
              console.error(`Setup failed: ${setupError.message}`);
              console.error('Try reinstalling: npm install -g termineer');
              process.exit(1);
            }
          }
          
          // Execute the binary
          try {
            const result = spawnSync(binaryPath, process.argv.slice(2), {
              stdio: 'inherit',
              shell: false
            });
            
            process.exit(result.status || 0);
          } catch (error) {
            console.error(`Error running Termineer: ${error.message}`);
            process.exit(1);
          }
          EOF
          
          # Debug all created files and make executable
          echo "Checking files in bin directory:"
          ls -la npm-package/bin/
          
          echo "Checking bundled binaries:"
          ls -la npm-package/bin/platform/*/
          
          # Make JavaScript files executable
          if [ -f npm-package/bin/termineer.js ]; then
            chmod +x npm-package/bin/termineer.js
            echo "Made termineer.js executable"
          else
            echo "ERROR: termineer.js not found"
          fi
          
          if [ -f npm-package/bin/setup.js ]; then
            chmod +x npm-package/bin/setup.js
            echo "Made setup.js executable"
          else
            echo "ERROR: setup.js not found"
          fi
          
          # Create README.md
          cat > npm-package/README.md << 'EOF'
          # Termineer
          
          AI Agent Console Interface
          
          ## Installation
          
          ```
          npm install -g termineer
          ```
          
          ## Usage
          
          ```
          termineer
          ```
          
          For more information, run:
          
          ```
          termineer --help
          ```
          
          ## Website
          
          Visit [termineer.io](https://termineer.io) for more information.
          EOF
          
      # Package everything up
      - name: Create NPM package
        run: |
          cd npm-package
          # No external dependencies needed anymore
          npm pack
          mv termineer-${{ needs.prepare-version.outputs.version }}.tgz ../termineer-npm-package.tgz
      
      # Upload the package as an artifact
      - name: Upload NPM package artifact
        uses: actions/upload-artifact@v4
        with:
          name: npm-package
          path: termineer-npm-package.tgz
      
      # Publish to NPM if requested
      - name: Publish to NPM
        if: needs.prepare-version.outputs.publish_npm == 'true'
        uses: JS-DevTools/npm-publish@v2
        with:
          token: ${{ secrets.NPM_TOKEN }}
          package: ./termineer-npm-package.tgz

  # Homebrew installation method has been removed